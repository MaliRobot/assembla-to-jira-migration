after
figure out a method for deploying to production that will not interrupt production service. see this post for [one possible approach|localhost:8080/browse/EC-14598?focusedCommentId=64853&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel].
"...so that I can create a language aware display based on it.
The issue is that when language tags are availalable for an object, e.g. http://europeana-npc-test.de.a9sapp.eu/record/02302/urn_imss_image_000364.html they are included only in the Record call response but not in the Search call response.
Context for the request is at localhost:8080/browse/EC-14675?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
*Acceptance criteria:*
This story is accepted when language tags are always included in the Search API-call response when available (in Mongo)."
See point 1 in Richard's comment to this tasks mother story, localhost:8080/browse/EC-14727?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
"Many javascripts depend on other javascripts, which may in turn  have dependencies of their own.
Traditionally this was handled by chaining together script-loading ajax calls or by merging script files into single files.  The clean, efficient and modern way to handle this is to use [requirejs|http://requirejs.org/].
Acceptance criteria:
	our html markup should contain (per page) a single script tag (entry point) - that being the link to requirejs
	the load-on-demand behaviour that we began to implement for the [map|localhost:8080/browse/EC-14674] should continue to work as before"
"The second IIIF example implemented in localhost:8080/browse/EC-14925?focusedCommentId=65918&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel is incorrect. It matches the wrong item with the wrong IIIF-manifest. Its IIIF-manifest must be removed.
Replace this test item with with http://test.europeana.eu/portal/record/9200365/BibliographicResource_3000094948479.html.html which has the IIIF-manifest http://iiif.biblissima.fr/manifests/ark:/12148/btv1b10500687r/manifest.json"
We need a more elegant solution than the one implemented in EC-15256 for the reasons listed by Richard here localhost:8080/browse/EC-15256?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
"To implement hit highlighting as it is being worked on in the API team. Suitable for A/B testing as well.
See: localhost:8080/browse/EA-6037"
"Background: localhost:8080/browse/EA-5964
This epic is the first iteration into bringing the first batch of user created annotations into Europeana Collections.
As you can read in the background ticket, there has been an experiment where we created thousands of inter-related object links between Europeana objects and Wikidata items.
The goal of this epic is to show those annotations in Europeana Collections."
"* Γ£ö Merge into master, tag
* Γ£ö EC-15537: Use SSL API
* Γ£ö EC-15550: Update Apache config; add CF manifest to Jenkins Config Files
* Γ£ö EC-15541: Update oEmbed provider
* Γ£ö #1191: Update proxy
* Γ£ö #1224: Add SendGrid service
* Γ£ö EC-15552: Set up Jenkins job for cache regeneration
* Γ£ö EC-15571: Set env var EXHIBITIONS_HOST: http://exhibitions.cfapps.io
* Γ£ö EC-15575: europeana-blacklight changes need merging into master, tagging, pushing to rubygems, and version ref updated in Collections
* Γ£ö Update styleguide version used to latest deployed to production. Not required, but best to keep it up-to-date. Version 0.2.40
* Γ£ö EC-15491: Disable the [custom facets|localhost:8080/browse/EC-15491?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel]
Post-deploy:
* Γ£ö Write Git release notes"
"See: localhost:8080/browse/EC-15700?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
Goes for all facets."
"As part of improving our search, it is essential that we start to log search interactions with the single goal to be able to reconstruct search queries. It has been decided that the current ELK-stack is best fit as a backend for this purpose. However, we do not track the information needed yet for the goal.
In order to do so, at minimum, we would need to log the following:
* The query terms themselves. This is supplied by Rails logging, in messages such as http://bit.ly/23ecCmz
* The number of hits found for the query terms. This isn't available in the logs at the moment - though it is a piece of information Solr supplies by default in its response headers, so acquiring this shouldn't be too difficult.
* The rank position of a clicked item in the Search Results Page. 
* All of this, tied together with some session identifier grouping a users session.
Background, context: localhost:8080/browse/EA-6100?focusedCommentId=21013&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
*Goal of spike*
To investigate whether the Ruby part of the application can facilitate in this logging and would in theory be able to write the minimum required information to the ELK-stack.
Part of the investigation should be a rough time estimate (split in tasks each a LARGE as maximum) to facilitate, and of course any concerns or objections along the way."
"To allow users to view previously made annotations and to create new annotations via the Annotations API.
h3. Display Wikidata annotations in Europeana 
The first thing we could do is to get annotations to display in Europeana. The [Wikidata experiment|localhost:8080/browse/EA-5964/details] seems the perfect candidate for this. No additional work for this is needed on the Annotations API and the benefit is that Collections can already start exploring how to connect with a different API and pull in annotations. We probably shouldn't label them as such as that would imply to users that they can add annotations themselves.
Tasks:
* Collections to hook-up with the Annotations API.
* Collections to do a search for annotations created by Europeana tools.
* Collections to retrieve all individual annotations and render them accordingly.
Timeframe: September 2016
h3. Collect music genres in the Music Collections 
Once we have established the connection with the Annotations API the next step is to allow our users to annotate. For this, we can do a very specific subset of data to allow us to do some experimentation and iterations on the functionality.
Flow to annotate:
* On all item pages which items which are either from the provider ""Europeana Sounds"" or are known to be retrieved via the Music Collections (breadcrumbs), we show the ability for a user to specify or enhance the music genre.
* We show the user a dropdown or a search input box (depending on the solution) to select or search a music genre, and add this as an annotation to the item.
* When a user wants to do so, he or she has to login with a MyEuropeana account first.
Tasks:
* Display music genres on the item page via an API call. We could display them somewhere along in the metadata in a new Annotations section for instance, as there will just be a few.
Allowing users to login via MyEuropeana on Collections. We should probably make these pages only accessible via the annotations feature, as these will be the only ones where a login is needed for.
* Show users either a dropdown with genres, or a search box with genres. Question is: which (API) query can Collections make to retrieve the labels?
* Collections creates the annotation via the Annotations API on behalf of the users' token from MyEuropeana. 
Timeframe: October/November 2016"
"I am checking http://www.europeana.eu/portal/en/record/90402/SK_A_2344.html?debug=json
and I find the attribution snippet HTML code in the JSON:
""htmlAttributionSnippet"": ""<span about='http://data.europeana.eu/item/90402/SK_A_2344'><a href='http://europeana.eu/portal/record/90402/SK_A_2344.html'><span property='dc:title' xml:lang='en'>The Milkmaid</span><span property='dc:title' xml:lang='nl'>Het melkmeisje</span></a>. <span property='dc:creator'>RM0001.PEOPLE.2529. </span><a href='http://www.rijksmuseum.nl/collectie/SK-A-2344'>Rijksmuseum</a>. <a href='http://creativecommons.org/publicdomain/mark/1.0/' rel='xhv:license http://www.europeana.eu/schemas/edm/rights'>Public Domain</a><span rel='cc:useGuidelines' resource='http://www.europeana.eu/rights/pd-usage-guide/'>.</span></span>"",
The two titles are not separated as we had agreed for EC-14905: localhost:8080/browse/EC-14905?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
(actually this one use a comma, but we may want to have a semicolon just as we have for the textAttributionSnippet
Also, the way the creator name is rendered is not good, both for the textAttributionSnippet and for the htmlAttributionSnippet: RM0001.PEOPLE.2529. This is because Rijks sent Vermeer to us as an entity (edm:Agent). The same logic should be applied as the one in the item display: ""Vermeer, Johannes"" is displayed there. But maybe this should be seen as a sort of new feature. It was probably outside of the logic we had specified for EC-14905"
"Getting images into static pages is not straightforward.  Markup like this:
{code:java}  <img src=""http://absolute/path/to/styleguide/image.jpg""/>
{code}
is not suitable, because it makes a reference to a specific version of the styleguide that may be deprecated.
Markup like this:
{code:java}  <img src=""../../relative/path/to/styleguide/image.jpg""/>
{code}
is not suitable either, because relative links in markup resolve relative to where the markup is served from (the application server) not where the images actually reside (the styleguide server)
The solution used [here|localhost:8080/browse/EC-16015/] follows the technique used for the Europeana logo: it uses a background image defined in the CSS.  This works because relative paths in CSS are resolved relative to the stylesheet, not the app server, and so the div added in the CMS with the class ""opus-img"" corresponds to a CSS rule that gives it the background image ""europeana_opus.png""
A limitation of this approach is that background images do not influence the size of the element they style, so in order to give this image dimension and maintain its aspect ratio the technique described here is used:
  http://stackoverflow.com/questions/600743/how-to-get-div-height-to-auto-adjust-to-background-size
This is not ideal.  Styleguide updates are necessary in order to add new images, and calculations are required in order to maintain aspect ratios.
Proposal: allow images to be uploaded and referenced directly in the CMS"
"As discussed here: localhost:8080/browse/EA-6365)-paths/details
This ticket is accepted when europeana.eu/api/entities/ maps to entity.europeana.eu/entity/."
"*Background:* 
The Europeana Fashion portal is closing in March and Europeana is migrating all of their content to a Thematic Collection. 
Now that we have tackled the ""Themes"" by Spiking the Galleries last sprint; this sprint we would like to investigate how where and how we can deal with the events (for reference check: http://www.europeanafashion.eu/portal/eventoverview.html) and (from a technical point of view) their Blog (see: http://www.europeanafashion.eu/portal/blogoverview.html). 
It was already decided by the Collections team that the Fashion blogs can be hosted on the Europeana End User Blog. (Category would be ""fashion"") 
*Problem:* 
Europeana Collections currently doesn't support Events and the blog is not fully integrated in the (technical space and design of) Collections. The End-user blog currently also has a separate CMS system (wordpress). What we would really like investigated for this spike is how to best technically implement and integrate these events and the Blog with Europeana Collections. 
Also; the current blogs and events need to be migrated to Collections and up until this point it seems to be that this will be a manual process. For this Spike we would like to investigate how to tackle these problems from a data, design and technical point of view and get an estimation of the time it will take to implement this. 
*Editoral data that is required:*
*Blog:* Title, author. date of publication and update, category (with the possibility to add multiple), tags (one or more), blog text, abiility to include one or more image per blog post,  abiility to include embeds (like youtube / video / soundcloud), the possibility to add links in the body text and other basic formatting like paragraphs/bold/italics and so on. Comments are a nice to have and if we implement them they should be Disqus based.
The blog display must include social media buttons (facebook, twitter, pinterest, etc. - same as in Collections elsewhere) for sharing. It's a nice to have to be able to include a picture and the name of the  blog post author. Another nice to have is an estimated time to read, using e.g. https://github.com/michael-lynch/reading-time
For reference and inspiration, see.eg. http://blog.europeana.eu/2017/01/access-easily-sounds-from-europeana-sounds-collections/ and http://www.europeanafashion.eu/portal/blogdetail.html?post=maria-callas-from-diva-to-icon) 
*Events:* Title/name of event, body text, images in body, date of publication, start time and end time of the event, location/map for the event. Events should be possible to classify into Categories, like Exhibition, Conference, Workshop, etc.
For reference and inspiration: http://pro.europeana.eu/event/digital-past-conference-2017 and http://www.europeanafashion.eu/portal/eventdetail.html?event=exhibition-across-art-and-fashion 
*Notes on the Design:*
See ticket [EC-15756|localhost:8080/browse/EC-15756] for reference
The most important thing here is that the design will fit the Europeana Collections design without reinventing the wheel entirely as we already have good designs for blog and event in Pro/COPE. 
*Suggestions and nice-to-knows:*
- The Fashion blog currently runs on Wordpress as does the End User blog. There might be a plug-in to support the migration but the Wordpress version of our End-User blog is terrible outdated so we can't tell what will happen if we update this and install a plug in. 
- We would like to have as few CMS's running as possible, so it would be very nice if we could decide on one CMS to rule them all or at least take a step towards that by eliminating Wordpress.
- We could use COPE and PRO designs as a base for the visual designs for both Blogs and Events. 
*Acceptance criteria:* 
We want to know how much time it will cost to implement this and what would be the best way to go about this while being able to keep the launch date of Fashion which is first week of March.
At the end of this SPIKE we need to have the following:
- One or more suggested solutions for which CMS to use, with one recommendation from a technical point of view
- Estimation of implementation per solution
- Pro's and Con's per solution, incl. ease of migration of legacy blog posts and events
- Designs in Invision for Blog list, Blog post/page, Events list, Event page. 
So that we in Sprint 40 can begin implementation based on proper technical and UI designs and have a production ready solution in place by the ned of Sprint 41."
"This epic is based on the conversations in ticket [1798|localhost:8080/browse/EC-16295] and the designs provided in ticket [1426|localhost:8080/browse/EC-15923]
This Epic is split into two child stories, one for the CMS work and one for the front-end display. This work must be well coordinated so that back-end and front-end are aligned. The stories can be further split into sub-tasks should the developers wish to do so.
Note that the intention is not to production release the Galleries feature after this sprint. The intention is to make a working version available in test and the further refine this feature, if needed, in Sprints 40 and 41 before going live."
"In localhost:8080/browse/EA-6272 we implemented the import from Commons of links to media files there from our objects. But these links are not displayed to the user. This should be fixed.
All Wikimedia Commons links have their own ""generator""
""creator"": {
  ""id"": ""https://commons.wikimedia.org/"",
  ""name"": ""Wikimedia Commons"",
  ""type"": ""Software""
}
in the Annotations API. That should be enough for Richard and/or Lutz to make the Annotations API calls to find and display them.
*Acceptance criteria:*
Links to the Commons files URLs are displayed as user created annotations in the item display."
"Make one production update of Europeana Radio. Once the tickets:
EC-16338
EC-16359
have been succesfully acceptance tested.
Deployment tasks:
# Both the player (v0.2.1) and the station (v0.2.2) will need to be deployed
# See localhost:8080/browse/EC-16359?focusedCommentId=70393&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel"
"The issue is that the Annotations API has just implemented the standard profile (see localhost:8080/browse/EA-5994) and made that its default profile, which Europeana Radio is not capable of parsing. As the production Annotations API will not yet accept the profile parameter, even just to ignore it, it is necessary to make Europeana Radio capable of parsing both the minimal and standard profiles, whichever happens to be returned by the Annotations API it is connected to by default.
This ticket is to:
1. Do the Radio code update
2. Deploy new version of Radio"
"*PROBLEM*
As we know from user research we can do a lot better in making browse a part of the user journey, thus extending it, deepening it and tying together different components (items, thematic collections, blog posts, exhibition, item sets like galleries and playlists) together into a whole that the user can navigate between. 
We also know that we have an issue in SEO in that our items relate only to other items via the Similar items feature. Establishing more internal linkage will make it easier for the Google crawler to crawl all our items (compared to just going through our sitemap) and influence our relevancy ranking via improved internal linkage.
*IDEA FOR A SOLUTION*
* Make the Collections CMS for blog posts, galleries and exhibitions use the Collections object (or entity) as an atomic unit
* Make it possible to via the Annotations API annotate objects and entities in Collections with the blog posts or exhibitions in which they are featured
* Revisit the mass-tagging and search macro features ideas for channels/thematic collections, https://europeanadev.assembla.com/spaces/europeana-creative/tickets/45 and in greate detail https://docs.google.com/document/d/15nqqs7M9V25iku9NsiEfXl-vJpWh31LmyaYVA__cvho/edit
Doing this brings together information siloed in blog posts and exhibitions with the objects/entities in Collections, the Collections object/entities becomes an atom that is created once and published in many places. 
On a more abstract/conceptual level, this helps us connect objects with their context/interpretation, and context/interpretation with objects.
In Europeana Collections we would then use these links in the display to *signal to the end-user the availability of these relations and navigational paths*. Like in this now old lo-fi wireframe:
https://projects.invisionapp.com/d/main#/console/1083571/78693285/preview 
Scroll down and note the visualised link-relation The Milkmaid here has to the Art Collections, one particular Exhibition and one particular Blog post. Which the user can of course click to navigate to.
_Collections CMS as API read client_
When an editor includes a Collections item in a blog post, exhibition or gallery the CMS supports them in that by pulling the item in via the Europeana API incl. core metadata (title, creator, rights, data provider, links - attribution snippet).
_Collections CMS as API write client_
In the background, with no manual effort from the editor, the CMS annotates the items used in the curated objects with the URLs of those items/CHOs. That way each item ""knows"" where it has been reused or referenced in Europeana sites and this can be exploited in the UI of Collections as envisioned in the early designs (see wireframe above).
This could be seen as a specific type of semantic/relation tag, an ""intra-Europeana sites bi-directional link"".
*Notes*
The two examples above use Collections objects as the case. It might as well be an entity e.g. connecting our entity for Vermeer with the blog posts and exhibitions in which he is featured/included.
In terms of UI display we could consider using og/twitter and/or oEmbed as ways to dynamically call in the necesary information to create ""cards"" in the object and entity display pages of Collections to the collections, exhibitions and blog posts they are included in.
Once we get to doing the User created sets items featured in those should also ""know"" that they are, cp. Rijksstudio e.g. https://www.rijksmuseum.nl/en/collection/SK-C-5 where the 3 most recent Rijksstudio collections in which the Night Watch are included in are featured on the Night Watch page.
*Potential connections and navigational paths*
* Item (EDM CHO) level and all ""curated"" levels:
* Items to Thematic collections, which would require a ""big batch annotation""
* Items to the Europeana Radio playlist
* Items to Exhibitions, see EC-16051 and localhost:8080/browse/EA-6173
* Items to Galleries, see EC-16409
* Items to Blog posts
* Items to Entities (here the link is already explicit in the item metadata via the contextual classes)
* Entities to Exhibitions (From Agent Mucha to Exhibition on Art Noveau in which he heavily features)
* Entities to Galleries (From Agent Mucha to Gallery of Much posters), see #1939
* Entities to Blog posts (From Agent Mucha to Blog post on our Art Nouveau Colouring Book)
* Entities to Entities (From Agent Mucha to Concepts Art Nouveau and Poster)
Of the above establishing relations (modelled and implemented as annotations) between items and blog posts/galleries/exhibitions would be the most prioritised IMO. 
*Inspirations*
* V&A on their CMS redesign, section ""The Idea"", http://www.vam.ac.uk/blog/digital-media/the-new-va-website-the-inside-story"
To support front-end template as referred at localhost:8080/browse/EC-16362
"Context: localhost:8080/browse/EC-16399?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
*After* release v1.6.0 which should deploy new topic modelling (see #1905), the old collections_galleries table can be deleted.
*NB:* This is a small but important follow-up task. Please do not postpone."
"Based on the already suggested object linking one for Exhibitions here:
localhost:8080/browse/EA-6173"
"*Business motivation:*
As many other sites we rely heavily on organic search traffic. Google has a 90% plus market share in Europe so when we say organic search that basically means Google.
The last year we have seen the number of indexed Europeana item pages drop radically from its peak at 25 million pages to now stabilising around 6 million. This has resulted in a noticeable drop in organic search traffic. 
This SUPEREPIC represents our work to reverse this trend.
*Stats:*
The numbers vary a bit, but currently about 2.7% or the records in our sitemap are indexed. We should try to improve this.
Stats May 10th: 
* Sitemap: 55.626.249 submitted, 1.472.607 indexed, 159.885 warnings (158.174 because blocked by robots.txt)
Stats May 11th:
* Total indexed pages: 5,936,143 
* Sitemap: 55.626.249 submitted, 1.521.553 indexed, 159.895 warnings (158.182 because blocked by robots.txt)
Stats June 11th:
* Sitemap: 55 536 307 submitted, 2 522 301 indexed, 160 276 warnings (158 468 because blocked by robots.txt)
*Improvement ideas and tickets:*
* Fix formal errors in the sitemap, e.g. broken links ([API ticket 605|localhost:8080/browse/EA-6533]) and blocked links (#2150)
* Make sure we don't index links from other urls like portal.europeana.eu and www.europeanastatic.eu (#2148). 
* Ensure we have timestamps for last updated in the sitemap ([API ticket 631|localhost:8080/browse/EA-6559])
* Test a smaller sitemap but with the best of our content ([API ticket 475|localhost:8080/browse/EA-6403] and [ticket 624|localhost:8080/browse/EA-6552])
* Add Schema.org markup to our item pages. Later also pages like galleries and exhibitions.
* Check whether having language specific targetting is actually working for us. The items aren't truly multilingual even if the UI is localise"
"In order for the Annotations API key data store change to be deployed to its production environment, it will likely need to be taken offline momentarily.
This will result in the stock Cloud Foundry error page which returns plain text like: ""404 Not Found: Requested route ('notfound.cfapps.io') does not exist.""
This can be simulated by setting in the app env EUROPEANA_ANNOTATIONS_API_URL to a non-existent CF app URL, e.g. http://notfound.cfapps.io/
If the Annotations API endpoint starts returning this, both the portal and radio will fail where they make requests to it. The error handling they already have in place is still not capable of handling this type of response.
They therefore need to be adapted to handle this scenario, before the [Annotations API change|localhost:8080/browse/EA-6452] makes it to production.
This will need to happen in the Ruby API client, and a hotfix deployed to both the portal and radio station."
"Item search on the Europeana Fashion portal has a combined materials and techniques facet. When ingested into Europeana these are two distinct fields, exposed in search as two facets: proxy_dc_format and proxy_dcterms_medium.
We already have the technique facet (from proxy_dc_format) configured and exposed for the Fashion collection, but also need a materials facet (from proxy_dcterms_medium).
This should just be a matter of adding that field in to the Blacklight facet configuration, restricted to display within the Fashion collection.
See localhost:8080/browse/EC-16517?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel for context."
"Remove CSRF token from GET requests - see [~richard.doe]'s comments here:
localhost:8080/browse/EC-16490?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
localhost:8080/browse/EC-16490?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
localhost:8080/browse/EC-16490?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel"
"*_Europeana 1914-1918 gets Framed!_* 
*Background:* 
Migration strategy proposals: https://docs.google.com/document/d/1SRSJzhdQxf1i-rzVAKJImVz1LWOeZG1W2BmLUJ-hja4 
Assembla SPIKE ticket: localhost:8080/browse/EC-16300 
Google doc: https://docs.google.com/document/d/14jlkgWHtpGV46yWyMje7B4XVJJNfkEomdyMu7EBEZxM/edit#
We are turning Europeana 1914-1918 into a Thematic Collection. In order to integrate the UGC features into Europeana Collections we came up with the solution of iFraming the features to prevents (heavy) development on the 1914-1918 application and Collections. 
*User EPIC:* 
As a user I want to be able to upload my UGC to Europeana Collections. 
*Implementation:* 
* Remove layout elements, e.g. header, footer and navigation, from 1914-1918 templates, leaving just the core content.
* Create a page on the Collections site embedding the 1914-1918 UGC functions in an iframe, e.g.: 
 /portal/en/collections/firstworldwar/contribute
This iframe will need to handle the following functionality from 14-18:
1.  europeana1914-1918.eu/en/users/register (non-logged in users registration)
2. europeana1914-1918.eu/en/users/sign-in (non-logged in users sign in)
3. europeana1914-1918.eu/en/users/password/new (non-logged in users password reset)
4. europeana1914-1918.eu/en/contributor  (non-signed in users links to register/login and help pages OR overview of logged in user's stories)
5. europeana1914-1918.eu/en/users/account (overview of logged in user's account details)
6. europeana1914-1918.eu/en/contacts/[NUMERIC USER ID]/edit?redirect=%2Fen%2Fusers%2Faccount (edit account details page for logged in user)
7. europeana1914-1918.eu/en/contributions/new (signed in user's new contribution form)
8. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/edit (signed in user's edit contribution form)
9. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/delete (signed in user's delete contribution confirmation form)
10. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/attachments/new (signed in user's new item form - also signed in user' view of existing items)
11. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/attachments/flickr (signed in user's flickr item creation - requires user to be logged into flickr too?)
12. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/attachments/[NUMERIC ATTACHMENT ID]/edit
13. europeana1914-1918.eu/en/contributions/[NUMERIC CONTRIBUTION ID]/attachments/[NUMERIC ATTACHMENT ID]/delete (signed in user's attachment deletion confirmation form)
Additionally the 14-18 app allows logged in users to edit their login credentials, however this functionality is broken. when requested it will result in ""The resource you requested was not found.""
# europeana1914-1918.eu/en/users/edit?redirect=%2Fen%2Fusers%2Faccount
This implies design work and technical (front-end) work. 
FRONT-END NOTE: Decide on a way that the URL(s) in the iFrame would work. 
Related tickets: "
"!Screen Shot 2017-05-17 at 11.18.27.png!
When clicking the public domain license link on the thematic collection, it loops back to the same page. Could we fix this link to go to the appropriate license link. [~Maggy] please can you provide the link?
*Acceptance Criteria*
 - In the license links in the dropdown, there should only be the options as specified by Maggy (localhost:8080/browse/EC-16665?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel)
There links are:
'Public Domain Mark' => 'public' => 'http://creativecommons.org/publicdomain/mark/1.0/'
'CC0' => 'CC0' => 'http://creativecommons.org/publicdomain/zero/1.0/'
'CC BY' => 'CC_BY' => 'http://creativecommons.org/licenses/by/4.0/'
'CC BY-SA' => 'CC_BY_SA' => 'http://creativecommons.org/licenses/by-sa/4.0/'
'CC BY-ND' => 'CC_BY_ND' => 'http://creativecommons.org/licenses/by-nd/4.0/'
'CC BY-NC' => 'CC_BY_NC' => 'http://creativecommons.org/licenses/by-nc/4.0/'
'CC BY-NC-SA' => 'CC_BY_NC_SA' => 'http://creativecommons.org/licenses/by-nc-sa/4.0/'
'CC BY-NC-ND' => 'CC_BY_NC_ND' => 'http://creativecommons.org/licenses/by-nc-nd/4.0/'
'In Copyright - EU Orphan Work' => 'INC-OW-EU' => 'http://rightsstatements.org/vocab/InC-OW-EU/1.0/ΓÇï'
'In Copyright - Educational Use Permitted' => 'INC_EDU' => 'http://rightsstatements.org/vocab/InC-EDU/1.0/ΓÇï'
'In Copyright' => 'INC' => 'http://rightsstatements.org/vocab/InC/1.0/'
'No Copyright - Non-Commercial Use Only' => 'NOC_NC' => 'http://rightsstatements.org/vocab/NoC-NC/1.0/'
'No Copyright - Other Known Legal Restrictions' => 'NOC_OKLR' => 'http://rightsstatements.org/vocab/NoC-OKLR/1.0/'
'Copyright Not Evaluated' => 'CNE' => 'http://rightsstatements.org/vocab/CNE/1.0/'ΓÇï
 - The HREF of the license should point to the appropriate license link based on what is selected from the list above.
!Screen Shot 2017-05-24 at 09.33.29.png!"
"*Time boxed to one day to investigate.
*
Relates to work done in previous ticket here: localhost:8080/browse/EC-16629?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
Fetch as Google is unable to see the hierarchies as per the ticket above. We need to make them visible to Google crawls."
To investigate what the impact of the changes from localhost:8080/browse/EA-6568
"In the interests of protecting the browsing of our users, preventing third parties from injecting maliciously while a user is browsing Europeana, and improving our Google search index, let's serve as much as possible over SSL.
We can't blanket-SSL the whole site, because we have datasets that serve rich content over an unsecured connection, so let's SSL content through the approach suggested by Richard in the comment and ticket below.
[[url:localhost:8080/browse/EC-16638?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel|[~DavidHaskiya] or, we could blacklist these by dataset ID, using non-SSL for their record pages and SSL for everything else, which would be very simple to achieve in Apache alone.
]]
Acceptance criteria:
 - When viewing an item of a dataset that does contain an unsecured embedded object (rich, image or otherwise), it should be a non-SSl page served via HTTP
 - When viewing any other page with external content, it should be served over SSL via HTTPS.
 - No security warnings should be shown in browser for any assets we're using, such as images, scripts, styles and other assets."
"*Acceptance*
 - All facets and filters are working as expected, including those of our thematic collections (thinking of Fashion).
 - Thematic collections can be accessed and searched.
 - Record pages: Do all clickable values resolve to something?
 - - For instance of isPartOf values that trigger a search if you click on them)
 - - no errors such as the on you noticed yourself for dc:publisher (localhost:8080/browse/EC-16645)
 - Are the browse entry points working as expected?
 - Are there issues with the galleries?
Any feature that generates data based on a search query should be checked. "
"Impact: Ensuring bookmarks remain, keeping good SEO and unblocking APIs deployment
The Record API has been adapted to issue 301 redirects for records whose IDs have changed: localhost:8080/browse/EA-6590
However, 301 responses from the Record API break the item page because the Ruby API client and applications using it are not redirection-aware, and need to be updated to handle them.
Acceptance criteria:
* Record API returning redirects results in Collections redirecting to the new record page URL."
As identified by [~kgish] localhost:8080/browse/EC-16734?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel there are various uses of page_title, these .rb templates should use page_content_heading and only application_view.rb shoul use page_title
"The GET method of the Entity API has been updated to expose the Wikimedia Commons link in the response, see ticket [API ticket 755|localhost:8080/browse/EA-6683]. This change implies that the value of the depiction field is no longer a string (URI) but a structure made out of an ""id"" and ""source"" fields.
Following this change, Collections Entity Pages need to be updated to accept this new structure and reuse the Commons link in the source field instead of generating the URL on the fly.
Acceptance: Europeana Portal must work with new format"
"We have recently noticed that the Entity API had not been updated following an update of spec that was done a while ago, see [API ticket 760|localhost:8080/browse/EA-6688]. In particular, the field ""contains"" and ""totalItems"" were not changed to respectively ""items"" and ""total"".
This change has impact on the auto-complete widget that will need to look for the ""items"" field instead of ""contains""."
"See: localhost:8080/browse/EC-15094?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
@renekok"
Now in Assembla: localhost:8080/browse/EA-5999
"* localhost:8080/browse/EA-6008
* https://europeanadev.assembla.com/spaces/europeana-infrastructure/tickets/38-add-dns-record-for-portal-europeana-eu/details"
"Created a ticket for this: localhost:8080/browse/EA-6009
(solution would entail to match every agent URI with the correct class, to derive the proper label based on this but since not every agent has a URI, or has a URI which appears in a class this is very complicated)."
localhost:8080/browse/EC-15575
"localhost:8080/browse/EC-15752
Moved all feedback there."
"For the option of using the AnnotationAPI for representing/storing the link, I suggest it is aligned with one chosen for ticket localhost:8080/browse/EA-6173, where the suggestion from Richard, is one of the options.
About the option of having a separate database, seems fine, the question is how we would ""transmit"" it to the client... from what I understood the client interacts with the API which means that the data would need to be output there in EDM.
About which option to take, what I can say is that Annotations opens the door for some potentially interesting scenarios (namely curating the collection, ie. user can disapprove that the item belongs to that collection, or add more) while the database seems to be a more efficient way to deal with it. But both need to be kept up-to-date quite often so this may be something to take in consideration when choosing the solution."
 localhost:8080/browse/EC-16106
localhost:8080/browse/EC-16085?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel and below
localhost:8080/browse/EC-16337
"# #1875: we need to do this first so that we are able to measure and report on the scale of the improvements, or indeed detect otherwise
# #1874: the Search API request for similar items affects every single item page, and tends to take 800 to 1,000 ms
# #1873: affects not all but still a significant majority of item pages as we already detect that some records have no hierarchy based on other fields
# #1877: affects every item page, and the record retrieval is inefficient, so would ideally be done after localhost:8080/browse/EA-5994
# #1876: only affects a subset of item pages and the oEmbed endpoints tend to respond very quickly compared to our (non-oEmbed) APIs"
It should appear live after refreshing the translations ([[url:localhost:8080/browse/EC-16373]])
Additionally they can edit the Content that they will be able to edit, specific permissions for individual instances will require a permissions mechanism added, that is work part of: localhost:8080/browse/EC-16471
Context is discussion at: localhost:8080/browse/EC-16501?focusedCommentId=0&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel
"I noticed that all sitemap files for which a large percentage of records are indexed (around 12.000 records of 450.000) have a 'last-modified' date. In the sitemap files with very few indexed records (about 30 records of 450000) only half of the records have a last-modified date, the other half doesn't. This confirms what David mentioned earlier that having a last-modified date in sitemap probably has an effect. I've created [[url:localhost:8080/browse/EA-6559|API ticket 631]] to fix the issue that some records do not have such a date.
I also checked 30 randomly chosen records to see whether they were indexed or not by Google. It could be a coincidence, but the 4 records that were indexed either have a priority of 0.0 or 1.0. All 4 have last-modified dates and 3 have thumbnails.
For 12 records that were not indexed I did find the same record from another source (usually the digital library that supplied it).
12 other records were not indexed, but I couldn't find a clear indication why not. Some have (recent) lastmodified dates, others do not, some have thumbnails.
Besides sitemap files, I also checked 30 randomly choosen records to see whether they were indexed or not by Google.
It could be a coincidence, but the 4 records that were indexed either have a priority of 0.0 or 1.0. All 4 have modified dates and 3 have thumbnails.
For 12 records that were not indexed I did find that record at some another source (usually the digital library that supplied it). 12 other records were not found at all, but I couldn't find a clear indication why not.
There are more details in the attached spreadsheet. [[file:dzOyvknICr55vWdmr6bg7m|Sitemap_stats.xlsx]]"
"By that I mean that the thumbnails are stored on S3 in the eu-central-1 region, i.e. Frankfurt, whereas Pivotal-hosted apps (inc API) are in the us-east-1 region, i.e. N. Virginia.
Any implementation of a thumbnail API will always need to make its own HTTP request(s) to S3, with the resultant latency implied by this geographical distribution.
In my opinion, the only way to make significant improvements to the performance of the thumbnail API is to reduce the latency caused by the geographical distribution, i.e. move the thumbnails and API physically closer together.
To test this theory, I used a real-world example of a [[url:http://www.europeana.eu/portal/en/collections/art?per_page=96&q=dress|Collections search results page with 96 thumbnails]]. The generated HTML was saved locally to eliminate the time required to perform the search API query and any other processing on the Collections side, and links to external assets removed (e.g. styleguide JS/CSS). The browser cache was cleared and then the page reloaded and timed. This test was performed with thumbnails served by three different application deployments:
# live production API (bypassing Apache)
# optimised API (see localhost:8080/browse/EA-6541)
# standalone Ruby application deployed to Pivotal
# standalone Ruby application deployed to IBM Bluemix in Germany
Timings for each scenario are as follows:
# live production API : page load takes ~ 8.5 seconds
# optimised API: ~ 6.5 seconds
# standalone Ruby application deployed to Pivotal: page load takes ~ 8.5 seconds
# standalone Ruby application deployed to IBM Bluemix in Germany: page load takes ~ 2.2 seconds
The Ruby application also already responds with ETag and Last-Modified headers, so a subsequent reload of the page takes < 100 ms.
Despite the standalone Ruby application having a very low resource footprint and serving only one endpoint, and having tried various code optimisations and streaming strategies, I was unable to make it perform noticeably better than the Search/Record API's thumbnail endpoint when also deployed to Pivotal, in the small amount of time spent with this POC.
From the above I conclude:
* The primary bottleneck is the network latency between Pivotal in the US and S3 in Germany
* Moving (whichever) application serves thumbnails nearer to the S3 bucket, e.g. IBM Bluemix in Germany, will give it a very sizeable performance boost
* Investing time in making other optimisations will likely yield very little ROI in terms of performance improvement in real-world cases. *Edit:* @patrick.ehlert has demonstrated otherwise with the optimisations to the thumbnail API, as shown in the updated figures, above.
I would also highlight that this standalone Ruby application is in essence a thumbnail API microservice and deploying it as-is to production would immediately give us a thumbnail service with no dependencies other than Amazon S3, hence it would not be impacted by issues with Solr, Mongo or Neo4J, nor any other failures of the Search/Record API, and could be scaled independently."
localhost:8080/browse/EC-16744
localhost:8080/browse/EC-16746

